# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DockerEngineAPI.Api.Service do
  @moduledoc """
  API calls for all endpoints tagged `Service`.
  """

  alias DockerEngineAPI.Connection
  import DockerEngineAPI.RequestBuilder


  @doc """
  Create a service

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - body (object): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_registry_auth (String.t): A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 

  ## Returns

  {:ok, %DockerEngineAPI.Model.ServiceCreateResponse{}} on success
  {:error, info} on failure
  """
  @spec service_create(Tesla.Env.client, DockerEngineAPI.Model.object.t, keyword()) :: {:ok, DockerEngineAPI.Model.ServiceCreateResponse.t} | {:error, Tesla.Env.t}
  def service_create(connection, body, opts \\ []) do
    optional_params = %{
      :"X-Registry-Auth" => :headers
    }
    %{}
    |> method(:post)
    |> url("/services/create")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.ServiceCreateResponse{})
  end

  @doc """
  Delete a service

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - id (String.t): ID or name of service.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec service_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def service_delete(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/services/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Inspect a service

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - id (String.t): ID or name of service.
  - opts (KeywordList): [optional] Optional parameters
    - :insert_defaults (boolean()): Fill empty fields with default values.

  ## Returns

  {:ok, %DockerEngineAPI.Model.Service{}} on success
  {:error, info} on failure
  """
  @spec service_inspect(Tesla.Env.client, String.t, keyword()) :: {:ok, DockerEngineAPI.Model.Service.t} | {:error, Tesla.Env.t}
  def service_inspect(connection, id, opts \\ []) do
    optional_params = %{
      :"insertDefaults" => :query
    }
    %{}
    |> method(:get)
    |> url("/services/#{id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.Service{})
  end

  @doc """
  List services

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :filters (String.t): A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list.  Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
    - :status (boolean()): Include service status, with count of running and desired tasks. 

  ## Returns

  {:ok, [%Service{}, ...]} on success
  {:error, info} on failure
  """
  @spec service_list(Tesla.Env.client, keyword()) :: {:ok, list(DockerEngineAPI.Model.Service.t)} | {:error, Tesla.Env.t}
  def service_list(connection, opts \\ []) do
    optional_params = %{
      :"filters" => :query,
      :"status" => :query
    }
    %{}
    |> method(:get)
    |> url("/services")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%DockerEngineAPI.Model.Service{}])
  end

  @doc """
  Get service logs
  Get &#x60;stdout&#x60; and &#x60;stderr&#x60; logs from a service. See also [&#x60;/containers/{id}/logs&#x60;](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the &#x60;local&#x60;, &#x60;json-file&#x60; or &#x60;journald&#x60; logging drivers. 

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - id (String.t): ID or name of the service
  - opts (KeywordList): [optional] Optional parameters
    - :details (boolean()): Show service context and extra details provided to logs.
    - :follow (boolean()): Keep connection after returning logs.
    - :stdout (boolean()): Return logs from &#x60;stdout&#x60;
    - :stderr (boolean()): Return logs from &#x60;stderr&#x60;
    - :since (integer()): Only return logs since this time, as a UNIX timestamp
    - :timestamps (boolean()): Add timestamps to every log line
    - :tail (String.t): Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 

  ## Returns

  {:ok, %DockerEngineAPI.Model.binary(){}} on success
  {:error, info} on failure
  """
  @spec service_logs(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def service_logs(connection, id, opts \\ []) do
    optional_params = %{
      :"details" => :query,
      :"follow" => :query,
      :"stdout" => :query,
      :"stderr" => :query,
      :"since" => :query,
      :"timestamps" => :query,
      :"tail" => :query
    }
    %{}
    |> method(:get)
    |> url("/services/#{id}/logs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Update a service

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - id (String.t): ID or name of service.
  - body (object): 
  - version (integer()): The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60; 
  - opts (KeywordList): [optional] Optional parameters
    - :registry_auth_from (String.t): If the &#x60;X-Registry-Auth&#x60; header is not specified, this parameter indicates where to find registry authorization credentials. 
    - :rollback (String.t): Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
    - :x_registry_auth (String.t): A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 

  ## Returns

  {:ok, %DockerEngineAPI.Model.ServiceUpdateResponse{}} on success
  {:error, info} on failure
  """
  @spec service_update(Tesla.Env.client, String.t, DockerEngineAPI.Model.object.t, integer(), keyword()) :: {:ok, DockerEngineAPI.Model.ServiceUpdateResponse.t} | {:error, Tesla.Env.t}
  def service_update(connection, id, body, version, opts \\ []) do
    optional_params = %{
      :"registryAuthFrom" => :query,
      :"rollback" => :query,
      :"X-Registry-Auth" => :headers
    }
    %{}
    |> method(:post)
    |> url("/services/#{id}/update")
    |> add_param(:body, :"body", body)
    |> add_param(:query, :"version", version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.ServiceUpdateResponse{})
  end
end
