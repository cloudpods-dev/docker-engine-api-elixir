# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DockerEngineAPI.Api.Plugin do
  @moduledoc """
  API calls for all endpoints tagged `Plugin`.
  """

  alias DockerEngineAPI.Connection
  import DockerEngineAPI.RequestBuilder

  @doc """
  Get plugin privileges

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - remote (String.t): The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%PluginPrivilege{}, ...]} on success
  {:error, info} on failure
  """
  def get_plugin_privileges(connection, remote, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/plugins/privileges")
    |> add_param(:query, :remote, remote)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%DockerEngineAPI.Model.PluginPrivilege{}])
  end

  @doc """
  Create a plugin

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
  - opts (KeywordList): [optional] Optional parameters
    - :tar_context (binary()): Path to tar containing plugin rootfs and manifest

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def plugin_create(connection, name, opts \\ []) do
    optional_params = %{
      :tarContext => :body
    }

    %{}
    |> method(:post)
    |> url("/plugins/create")
    |> add_param(:query, :name, name)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Remove a plugin

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
  - opts (KeywordList): [optional] Optional parameters
    - :force (boolean()): Disable the plugin before removing. This may result in issues if the plugin is in use by a container. 

  ## Returns

  {:ok, %DockerEngineAPI.Model.Plugin{}} on success
  {:error, info} on failure
  """
  def plugin_delete(connection, name, opts \\ []) do
    optional_params = %{
      :force => :query
    }

    %{}
    |> method(:delete)
    |> url("/plugins/#{name}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.Plugin{})
  end

  @doc """
  Disable a plugin

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
  - opts (KeywordList): [optional] Optional parameters
    - :force (boolean()): Force disable a plugin even if still in use. 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def plugin_disable(connection, name, opts \\ []) do
    optional_params = %{
      :force => :query
    }

    %{}
    |> method(:post)
    |> url("/plugins/#{name}/disable")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Enable a plugin

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
  - opts (KeywordList): [optional] Optional parameters
    - :timeout (integer()): Set the HTTP client timeout (in seconds)

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def plugin_enable(connection, name, opts \\ []) do
    optional_params = %{
      :timeout => :query
    }

    %{}
    |> method(:post)
    |> url("/plugins/#{name}/enable")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Inspect a plugin

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DockerEngineAPI.Model.Plugin{}} on success
  {:error, info} on failure
  """
  def plugin_inspect(connection, name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/plugins/#{name}/json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.Plugin{})
  end

  @doc """
  List plugins
  Returns information about installed plugins.

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :filters (String.t): A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list.  Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 

  ## Returns

  {:ok, [%Plugin{}, ...]} on success
  {:error, info} on failure
  """
  def plugin_list(connection, opts \\ []) do
    optional_params = %{
      :filters => :query
    }

    %{}
    |> method(:get)
    |> url("/plugins")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%DockerEngineAPI.Model.Plugin{}])
  end

  @doc """
  Install a plugin
  Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [&#x60;POST /plugins/{name}/enable&#x60; endpoint](#operation/PostPluginsEnable). 

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - remote (String.t): Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
  - opts (KeywordList): [optional] Optional parameters
    - :name (String.t): Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
    - :x_registry_auth (String.t): A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
    - :body ([PluginPrivilege]): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def plugin_pull(connection, remote, opts \\ []) do
    optional_params = %{
      :name => :query,
      :"X-Registry-Auth" => :headers,
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/plugins/pull")
    |> add_param(:query, :remote, remote)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Push a plugin
  Push a plugin to the registry. 

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def plugin_push(connection, name, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/plugins/#{name}/push")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Configure a plugin

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
  - opts (KeywordList): [optional] Optional parameters
    - :body ([String.t]): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def plugin_set(connection, name, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/plugins/#{name}/set")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Upgrade a plugin

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
  - remote (String.t): Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
  - opts (KeywordList): [optional] Optional parameters
    - :x_registry_auth (String.t): A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
    - :body ([PluginPrivilege]): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def plugin_upgrade(connection, name, remote, opts \\ []) do
    optional_params = %{
      :"X-Registry-Auth" => :headers,
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/plugins/#{name}/upgrade")
    |> add_param(:query, :remote, remote)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
