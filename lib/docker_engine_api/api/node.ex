# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DockerEngineAPI.Api.Node do
  @moduledoc """
  API calls for all endpoints tagged `Node`.
  """

  alias DockerEngineAPI.Connection
  import DockerEngineAPI.RequestBuilder


  @doc """
  Delete a node

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - id (String.t): The ID or name of the node
  - opts (KeywordList): [optional] Optional parameters
    - :force (boolean()): Force remove a node from the swarm

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec node_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def node_delete(connection, id, opts \\ []) do
    optional_params = %{
      :"force" => :query
    }
    %{}
    |> method(:delete)
    |> url("/nodes/#{id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Inspect a node

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - id (String.t): The ID or name of the node
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DockerEngineAPI.Model.Node{}} on success
  {:error, info} on failure
  """
  @spec node_inspect(Tesla.Env.client, String.t, keyword()) :: {:ok, DockerEngineAPI.Model.Node.t} | {:error, Tesla.Env.t}
  def node_inspect(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/nodes/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.Node{})
  end

  @doc """
  List nodes

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :filters (String.t): Filters to process on the nodes list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;id&#x3D;&lt;node id&gt;&#x60; - &#x60;label&#x3D;&lt;engine label&gt;&#x60; - &#x60;membership&#x3D;&#x60;(&#x60;accepted&#x60;|&#x60;pending&#x60;)&#x60; - &#x60;name&#x3D;&lt;node name&gt;&#x60; - &#x60;node.label&#x3D;&lt;node label&gt;&#x60; - &#x60;role&#x3D;&#x60;(&#x60;manager&#x60;|&#x60;worker&#x60;)&#x60; 

  ## Returns

  {:ok, [%Node{}, ...]} on success
  {:error, info} on failure
  """
  @spec node_list(Tesla.Env.client, keyword()) :: {:ok, list(DockerEngineAPI.Model.Node.t)} | {:error, Tesla.Env.t}
  def node_list(connection, opts \\ []) do
    optional_params = %{
      :"filters" => :query
    }
    %{}
    |> method(:get)
    |> url("/nodes")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%DockerEngineAPI.Model.Node{}])
  end

  @doc """
  Update a node

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - id (String.t): The ID of the node
  - version (integer()): The version number of the node object being updated. This is required to avoid conflicting writes. 
  - opts (KeywordList): [optional] Optional parameters
    - :body (NodeSpec): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec node_update(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def node_update(connection, id, version, opts \\ []) do
    optional_params = %{
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/nodes/#{id}/update")
    |> add_param(:query, :"version", version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
