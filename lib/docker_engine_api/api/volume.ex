# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DockerEngineAPI.Api.Volume do
  @moduledoc """
  API calls for all endpoints tagged `Volume`.
  """

  alias DockerEngineAPI.Connection
  import DockerEngineAPI.RequestBuilder

  @doc """
  Create a volume

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - volume_config (VolumeCreateOptions): Volume configuration
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DockerEngineAPI.Model.Volume{}} on success
  {:error, info} on failure
  """
  def volume_create(connection, volume_config, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/volumes/create")
    |> add_param(:body, :volumeConfig, volume_config)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.Volume{})
  end

  @doc """
  Remove a volume
  Instruct the driver to remove the volume.

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): Volume name or ID
  - opts (KeywordList): [optional] Optional parameters
    - :force (boolean()): Force the removal of the volume

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def volume_delete(connection, name, opts \\ []) do
    optional_params = %{
      :force => :query
    }

    %{}
    |> method(:delete)
    |> url("/volumes/#{name}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Inspect a volume

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): Volume name or ID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DockerEngineAPI.Model.Volume{}} on success
  {:error, info} on failure
  """
  def volume_inspect(connection, name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/volumes/#{name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.Volume{})
  end

  @doc """
  List volumes

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :filters (String.t): JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. 

  ## Returns

  {:ok, %DockerEngineAPI.Model.VolumeListResponse{}} on success
  {:error, info} on failure
  """
  def volume_list(connection, opts \\ []) do
    optional_params = %{
      :filters => :query
    }

    %{}
    |> method(:get)
    |> url("/volumes")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.VolumeListResponse{})
  end

  @doc """
  Delete unused volumes

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :filters (String.t): Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. - &#x60;all&#x60; (&#x60;all&#x3D;true&#x60;) - Consider all (local) volumes for pruning and not just anonymous volumes. 

  ## Returns

  {:ok, %DockerEngineAPI.Model.VolumePruneResponse{}} on success
  {:error, info} on failure
  """
  def volume_prune(connection, opts \\ []) do
    optional_params = %{
      :filters => :query
    }

    %{}
    |> method(:post)
    |> url("/volumes/prune")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.VolumePruneResponse{})
  end

  @doc """
  \&quot;Update a volume. Valid only for Swarm cluster volumes\&quot; 

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - name (String.t): The name or ID of the volume
  - version (integer()): The version number of the volume being updated. This is required to avoid conflicting writes. Found in the volume&#39;s &#x60;ClusterVolume&#x60; field. 
  - opts (KeywordList): [optional] Optional parameters
    - :body (Body): The spec of the volume to update. Currently, only Availability may change. All other fields must remain unchanged. 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def volume_update(connection, name, version, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/volumes/#{name}")
    |> add_param(:query, :version, version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
