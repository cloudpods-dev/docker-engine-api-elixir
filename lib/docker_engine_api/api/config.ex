# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DockerEngineAPI.Api.Config do
  @moduledoc """
  API calls for all endpoints tagged `Config`.
  """

  alias DockerEngineAPI.Connection
  import DockerEngineAPI.RequestBuilder

  @doc """
  Create a config

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (object): 

  ## Returns

  {:ok, %DockerEngineAPI.Model.IdResponse{}} on success
  {:error, info} on failure
  """
  def config_create(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/configs/create")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.IdResponse{})
  end

  @doc """
  Delete a config

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - id (String.t): ID of the config
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def config_delete(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/configs/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Inspect a config

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - id (String.t): ID of the config
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DockerEngineAPI.Model.Config{}} on success
  {:error, info} on failure
  """
  def config_inspect(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/configs/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DockerEngineAPI.Model.Config{})
  end

  @doc """
  List configs

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :filters (String.t): A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list.  Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60; 

  ## Returns

  {:ok, [%Config{}, ...]} on success
  {:error, info} on failure
  """
  def config_list(connection, opts \\ []) do
    optional_params = %{
      :filters => :query
    }

    %{}
    |> method(:get)
    |> url("/configs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%DockerEngineAPI.Model.Config{}])
  end

  @doc """
  Update a Config

  ## Parameters

  - connection (DockerEngineAPI.Connection): Connection to server
  - id (String.t): The ID or name of the config
  - version (integer()): The version number of the config object being updated. This is required to avoid conflicting writes. 
  - opts (KeywordList): [optional] Optional parameters
    - :body (ConfigSpec): The spec of the config to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [ConfigInspect endpoint](#operation/ConfigInspect) response values. 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  def config_update(connection, id, version, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/configs/#{id}/update")
    |> add_param(:query, :version, version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
