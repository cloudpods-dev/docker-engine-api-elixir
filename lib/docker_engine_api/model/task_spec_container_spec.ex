# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DockerEngineAPI.Model.TaskSpecContainerSpec do
  @moduledoc """
  Container spec for the service.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are &gt; mutually exclusive. PluginSpec is only used when the Runtime field &gt; is set to &#x60;plugin&#x60;. NetworkAttachmentSpec is used when the Runtime &gt; field is set to &#x60;attachment&#x60;. 
  """

  @derive [Poison.Encoder]
  defstruct [
    :Image,
    :Labels,
    :Command,
    :Args,
    :Hostname,
    :Env,
    :Dir,
    :User,
    :Groups,
    :Privileges,
    :TTY,
    :OpenStdin,
    :ReadOnly,
    :Mounts,
    :StopSignal,
    :StopGracePeriod,
    :HealthCheck,
    :Hosts,
    :DNSConfig,
    :Secrets,
    :Configs,
    :Isolation,
    :Init,
    :Sysctls,
    :CapabilityAdd,
    :CapabilityDrop,
    :Ulimits
  ]

  @type t :: %__MODULE__{
          :Image => String.t(),
          :Labels => %{optional(String.t()) => String.t()},
          :Command => [String.t()],
          :Args => [String.t()],
          :Hostname => String.t(),
          :Env => [String.t()],
          :Dir => String.t(),
          :User => String.t(),
          :Groups => [String.t()],
          :Privileges => TaskSpecContainerSpecPrivileges,
          :TTY => boolean(),
          :OpenStdin => boolean(),
          :ReadOnly => boolean(),
          :Mounts => [Mount],
          :StopSignal => String.t(),
          :StopGracePeriod => integer(),
          :HealthCheck => HealthConfig,
          :Hosts => [String.t()],
          :DNSConfig => TaskSpecContainerSpecDnsConfig,
          :Secrets => [TaskSpecContainerSpecSecrets],
          :Configs => [TaskSpecContainerSpecConfigs],
          :Isolation => String.t(),
          :Init => boolean(),
          :Sysctls => %{optional(String.t()) => String.t()},
          :CapabilityAdd => [String.t()],
          :CapabilityDrop => [String.t()],
          :Ulimits => [ResourcesUlimits]
        }
end

defimpl Poison.Decoder, for: DockerEngineAPI.Model.TaskSpecContainerSpec do
  import DockerEngineAPI.Deserializer

  def decode(value, options) do
    value
    |> deserialize(
      :Privileges,
      :struct,
      DockerEngineAPI.Model.TaskSpecContainerSpecPrivileges,
      options
    )
    |> deserialize(:Mounts, :list, DockerEngineAPI.Model.Mount, options)
    |> deserialize(:HealthCheck, :struct, DockerEngineAPI.Model.HealthConfig, options)
    |> deserialize(
      :DNSConfig,
      :struct,
      DockerEngineAPI.Model.TaskSpecContainerSpecDnsConfig,
      options
    )
    |> deserialize(:Secrets, :list, DockerEngineAPI.Model.TaskSpecContainerSpecSecrets, options)
    |> deserialize(:Configs, :list, DockerEngineAPI.Model.TaskSpecContainerSpecConfigs, options)
    |> deserialize(:Ulimits, :list, DockerEngineAPI.Model.ResourcesUlimits, options)
  end
end
