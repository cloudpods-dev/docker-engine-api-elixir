# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DockerEngineAPI.Model.SystemInfo do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :ID,
    :Containers,
    :ContainersRunning,
    :ContainersPaused,
    :ContainersStopped,
    :Images,
    :Driver,
    :DriverStatus,
    :DockerRootDir,
    :Plugins,
    :MemoryLimit,
    :SwapLimit,
    :KernelMemoryTCP,
    :CpuCfsPeriod,
    :CpuCfsQuota,
    :CPUShares,
    :CPUSet,
    :PidsLimit,
    :OomKillDisable,
    :IPv4Forwarding,
    :BridgeNfIptables,
    :BridgeNfIp6tables,
    :Debug,
    :NFd,
    :NGoroutines,
    :SystemTime,
    :LoggingDriver,
    :CgroupDriver,
    :CgroupVersion,
    :NEventsListener,
    :KernelVersion,
    :OperatingSystem,
    :OSVersion,
    :OSType,
    :Architecture,
    :NCPU,
    :MemTotal,
    :IndexServerAddress,
    :RegistryConfig,
    :GenericResources,
    :HttpProxy,
    :HttpsProxy,
    :NoProxy,
    :Name,
    :Labels,
    :ExperimentalBuild,
    :ServerVersion,
    :Runtimes,
    :DefaultRuntime,
    :Swarm,
    :LiveRestoreEnabled,
    :Isolation,
    :InitBinary,
    :ContainerdCommit,
    :RuncCommit,
    :InitCommit,
    :SecurityOptions,
    :ProductLicense,
    :DefaultAddressPools,
    :Warnings
  ]

  @type t :: %__MODULE__{
          :ID => String.t(),
          :Containers => integer(),
          :ContainersRunning => integer(),
          :ContainersPaused => integer(),
          :ContainersStopped => integer(),
          :Images => integer(),
          :Driver => String.t(),
          :DriverStatus => [[String.t()]],
          :DockerRootDir => String.t(),
          :Plugins => PluginsInfo,
          :MemoryLimit => boolean(),
          :SwapLimit => boolean(),
          :KernelMemoryTCP => boolean(),
          :CpuCfsPeriod => boolean(),
          :CpuCfsQuota => boolean(),
          :CPUShares => boolean(),
          :CPUSet => boolean(),
          :PidsLimit => boolean(),
          :OomKillDisable => boolean(),
          :IPv4Forwarding => boolean(),
          :BridgeNfIptables => boolean(),
          :BridgeNfIp6tables => boolean(),
          :Debug => boolean(),
          :NFd => integer(),
          :NGoroutines => integer(),
          :SystemTime => String.t(),
          :LoggingDriver => String.t(),
          :CgroupDriver => String.t(),
          :CgroupVersion => String.t(),
          :NEventsListener => integer(),
          :KernelVersion => String.t(),
          :OperatingSystem => String.t(),
          :OSVersion => String.t(),
          :OSType => String.t(),
          :Architecture => String.t(),
          :NCPU => integer(),
          :MemTotal => integer(),
          :IndexServerAddress => String.t(),
          :RegistryConfig => RegistryServiceConfig,
          :GenericResources => GenericResources,
          :HttpProxy => String.t(),
          :HttpsProxy => String.t(),
          :NoProxy => String.t(),
          :Name => String.t(),
          :Labels => [String.t()],
          :ExperimentalBuild => boolean(),
          :ServerVersion => String.t(),
          :Runtimes => %{optional(String.t()) => Runtime},
          :DefaultRuntime => String.t(),
          :Swarm => SwarmInfo,
          :LiveRestoreEnabled => boolean(),
          :Isolation => String.t(),
          :InitBinary => String.t(),
          :ContainerdCommit => Commit,
          :RuncCommit => Commit,
          :InitCommit => Commit,
          :SecurityOptions => [String.t()],
          :ProductLicense => String.t(),
          :DefaultAddressPools => [SystemInfoDefaultAddressPools],
          :Warnings => [String.t()]
        }
end

defimpl Poison.Decoder, for: DockerEngineAPI.Model.SystemInfo do
  import DockerEngineAPI.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:Plugins, :struct, DockerEngineAPI.Model.PluginsInfo, options)
    |> deserialize(:RegistryConfig, :struct, DockerEngineAPI.Model.RegistryServiceConfig, options)
    |> deserialize(:GenericResources, :struct, DockerEngineAPI.Model.GenericResources, options)
    |> deserialize(:Runtimes, :map, DockerEngineAPI.Model.Runtime, options)
    |> deserialize(:Swarm, :struct, DockerEngineAPI.Model.SwarmInfo, options)
    |> deserialize(:ContainerdCommit, :struct, DockerEngineAPI.Model.Commit, options)
    |> deserialize(:RuncCommit, :struct, DockerEngineAPI.Model.Commit, options)
    |> deserialize(:InitCommit, :struct, DockerEngineAPI.Model.Commit, options)
    |> deserialize(
      :DefaultAddressPools,
      :list,
      DockerEngineAPI.Model.SystemInfoDefaultAddressPools,
      options
    )
  end
end
